package voyager.quickstart.discovery;

import java.io.File;
import java.io.PrintStream;
import java.util.Date;
import java.util.Random;

import voyager.api.discovery.jobs.DiscoveryAction;
import voyager.api.discovery.jobs.DiscoveryJob;
import voyager.api.domain.model.entry.DexField;
import voyager.api.domain.model.entry.Entry;
import voyager.api.domain.model.entry.EntryLink;
import voyager.api.domain.model.entry.EntryMeta;

public class JobSamples {
  
  /**
   * We will use the Docs folder for reference
   */
  private static File docs = null;
  public synchronized static File getDocsFolder()
  {
    if(docs==null) {
      String[] check = new String[] {
          "docs",
          "../docs"
      };
      
      for(String name : check) {
        docs = new File(name);
        if(docs.exists()) {
          try {
            docs = docs.getCanonicalFile();
          }
          catch(Exception ex) {
            ex.printStackTrace();
          }
          break;
        }
      }
    }
    return docs;
  }

  public static DiscoveryJob makeCommitJob()
  {
    DiscoveryJob job = new DiscoveryJob();
    job.setAction(DiscoveryAction.ADD);
    return job;
  }
    
  public static DiscoveryJob makeAddSimpleRectord()
  {
    DiscoveryJob job = new DiscoveryJob();
    job.setAction(DiscoveryAction.ADD);
    job.setId("simple_1234");
    
    Entry entry = new Entry();
    entry.setField(DexField.NAME, "Name ("+System.currentTimeMillis()+")");
    entry.setField(DexField.ABSTRACT, "some longer text about what we have");
    
    // Point to raw metadata
    EntryMeta meta = new EntryMeta();
    meta.setBody("<xml>raw XML metadata</xml>");
   // meta.setPath("c:/path/to/meta.xml");
    entry.setMeta(meta);
    
    job.setEntry(entry);
    return job;
  }

  public static DiscoveryJob makeAddRecordTree()
  {
    DiscoveryJob job = new DiscoveryJob();
    job.setAction(DiscoveryAction.ADD);
    job.setId("tree_1234");
    
    Entry entry = new Entry();
    entry.setField(DexField.NAME, "Root Tree ("+System.currentTimeMillis()+")");
    entry.setField(DexField.ABSTRACT, "some longer text about what we have");
    job.setEntry(entry);
    
    Random rand = new Random();
    for(int i=0; i<10; i++) {
      int v = rand.nextInt(10);
      Entry sub = new Entry("sub"+v);
      if((v%2)==0) {
        // This just displays in the tree.  
        // It does not get a record in the index
        sub.setIndex(false);
      }
      else {
        sub.setField(DexField.AUTHOR, "This is the author tag");
      }
      entry.addChild(sub);
    }
    return job;
  }
  

  public static DiscoveryJob makeAddRecordWithLinks()
  {
    DiscoveryJob job = new DiscoveryJob();
    job.setAction(DiscoveryAction.ADD);
    job.setId("with_links_1234");
    
    Entry entry = new Entry();
    entry.setField(DexField.NAME, "Link ("+System.currentTimeMillis()+")");
    entry.setField(DexField.ABSTRACT, "some longer text about what we have");
    job.setEntry(entry);
    
    File docs = getDocsFolder();
    EntryLink link = new EntryLink();
    link.setName("linked data");
    link.setFormat("image/png");
    link.setPath(new File(docs,"imgs/links.png").getAbsolutePath());
    link.setRelation("data");
    entry.addLink(link);
    
    link = new EntryLink();
    link.setName("tree data");
    // with a path and no 'format' we will try to detect it
    link.setPath(new File(docs,"imgs/tree.png").getAbsolutePath());
    link.setRelation("data");
    entry.addLink(link);
    
    return job;
  }
  
  public static void write(PrintStream out) throws Exception
  {
    out.println("Sample Discovery Jobs");
    out.println("=====================");
    out.println("```");
    out.println("This page was autogenerated by [JobSamples.java](../src/main/java/voyager/quickstart/discovery/JobSamples.java) on "+new Date());
    out.println("```\n");
    out.println("");
    

    out.println("\n## Simple Job");
    out.println("A simple jo  b with no external file reference");
    out.println( "```json" );
    out.println( makeAddSimpleRectord().toPrettyJSON() );
    out.println( "```" );

    out.println("### Entry with internal structure");
    out.println("children with <code>index: false</code> will appear in the tree, but not have their own record");
    out.println( "\n```json" );
    out.println( makeAddRecordTree().toPrettyJSON() );
    out.println( "```" );
    out.println( "The tree structure is displayed in the ui as:");
    out.println( "\n![structure](imgs/structure.png)\n");


    out.println("### Entry with links to data");
    out.println("Items with links to other data.");
    out.println( "\n```json" );
    out.println( makeAddRecordWithLinks().toPrettyJSON() );
    out.println( "```" );
    out.println( "Links are displayed in the ui as:");
    out.println( "\n![structure](imgs/links.png)\n");
    
  }
  
  
  public static void main(String[] args) throws Exception
  {
    write(System.out);
  }
}
